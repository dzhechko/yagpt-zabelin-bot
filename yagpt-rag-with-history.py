from langchain_community.chat_message_histories import StreamlitChatMessageHistory
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_community.chat_models import ChatYandexGPT

from langchain_community.vectorstores import OpenSearchVectorSearch
from yandex_chain import YandexEmbeddings
# from yandex_chain import YandexLLM

from langchain.chains import create_history_aware_retriever, create_retrieval_chain
from langchain.chains.combine_documents import create_stuff_documents_chain
# from langchain_community.chat_message_histories import ChatMessageHistory
from langchain_core.chat_history import BaseChatMessageHistory

import streamlit as st
import os
# from dotenv import load_dotenv

import requests

# —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ streamlit
def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    logo_image = './images/logo.png'  # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ª–æ–≥–æ—Ç–∏–ø–∞

    # # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    from PIL import Image
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
    logo = Image.open(logo_image)
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
    resized_logo = logo.resize((100, 100))
    st.set_page_config(page_title="–ó–∞–±–µ–ª–∏–Ω —á–∞—Ç-–±–æ—Ç", page_icon="üìñ")   
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    st.image(resized_logo)
    st.title('üìñ –ó–∞–±–µ–ª–∏–Ω —á–∞—Ç-–±–æ—Ç')
    """
    –ß–∞—Ç-–±–æ—Ç –Ω–∞ –±–∞–∑–µ YandexGPT –ø–æ [—É—á–µ–±–Ω–∏–∫—É](https://urpc.ru/student/pechatnie_izdania/005_708212084_Zaplatin.pdf), –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã. –ß—Ç–æ–±—ã "—Å–±—Ä–æ—Å–∏—Ç—å" –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–∞—É–∑–µ—Ä–∞, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞.
    """
    # st.warning('–≠—Ç–æ Playground –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å YandexGPT')

    # –≤–≤–æ–¥–∏—Ç—å –≤—Å–µ credentials –≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Å–ª–µ–≤–∞
    # Sidebar contents
    with st.sidebar:
        st.title('\U0001F917\U0001F4ACYandexGPT —á–∞—Ç-–±–æ—Ç')
        st.markdown('''
        ## –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
        –î–∞–Ω–Ω—ã–π —á–∞—Ç–±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
        - [Yandex GPT](https://cloud.yandex.ru/services/yandexgpt)
        - [Yandex GPT for Langchain](https://python.langchain.com/docs/integrations/chat/yandex)
        - [Streamlit](https://streamlit.io/)
        - [LangChain](https://python.langchain.com/)
        ''')

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–±–æ—Ç—ã –ø–∞–º—è—Ç–∏
    msgs = StreamlitChatMessageHistory(key="langchain_messages")
    if len(msgs.messages) == 0:
        msgs.add_ai_message("–ü—Ä–∏–≤–µ—Ç, —è –ù–∏–∫–∏—Ç–∞ –ó–∞–±–µ–ª–∏–Ω! –ß–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?")

    view_messages = st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

    yagpt_folder_id = st.secrets["YC_FOLDER_ID"]
    yagpt_api_key = st.secrets["YC_API_KEY"]
    sk_api_ep = st.secrets["SK_API_EP"]
    mdb_os_pwd = st.secrets["MDB_OS_PWD"]
    mdb_os_hosts = st.secrets["MDB_OS_HOSTS"].split(",")
    mdb_os_index_name = st.secrets["MDB_OS_INDEX_NAME"]

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ .env
    # load_dotenv()
    # yagpt_folder_id = os.getenv("YC_FOLDER_ID")
    # yagpt_api_key = os.getenv("YC_API_KEY")


    # # –ü–æ–ª—É—á–µ–Ω–∏–µ folder id
    # if "yagpt_folder_id" in st.secrets:
    #     yagpt_folder_id = st.secrets.yagpt_folder_id
    # else:
    #     yagpt_folder_id = st.sidebar.text_input("YaGPT folder ID", type="password")
    if not yagpt_folder_id:
        st.info("–£–∫–∞–∂–∏—Ç–µ [YC folder ID](https://cloud.yandex.ru/ru/docs/yandexgpt/quickstart#yandex-account_1) –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–∞—Ç-–±–æ—Ç–∞")
        st.stop()

    # # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ YaGPT API
    # if "yagpt_api_key" in st.secrets:
    #     yagpt_api_key = st.secrets.yagpt_api_key
    # else:
    #     yagpt_api_key = st.sidebar.text_input("YaGPT API Key", type="password")
    if not yagpt_api_key:
        st.info("–£–∫–∞–∂–∏—Ç–µ [YandexGPT API –∫–ª—é—á](https://cloud.yandex.ru/ru/docs/iam/operations/api-key/create#console_1) –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–∞—Ç-–±–æ—Ç–∞")
        st.stop()

    with st.sidebar:
        st.markdown('''
            ## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å [–º–æ–¥–µ–ª—å](https://cloud.yandex.ru/ru/docs/yandexgpt/concepts/models), —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞, —Å—Ç–µ–ø–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            ''')

    model_list = [
      "YandexGPT Lite",
      "YandexGPT Pro"      
    ]    
    index_model = 1
    selected_model = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã:", model_list, index=index_model, key="index")     
    
    # yagpt_prompt = st.sidebar.text_input("–ü—Ä–æ–º–ø—Ç-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è YandexGPT")
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
    prompt_option = st.sidebar.selectbox(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å',
        ('–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é', '–ó–∞–¥–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ')
    )
    default_prompt = """
    –¢—ã ‚Äî –ù–∏–∫–∏—Ç–∞ –ó–∞–±–µ–ª–∏–Ω ‚Äî —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –º—É–∑—ã–∫–∞–Ω—Ç, –¥–∏–¥–∂–µ–π –∏ —Ç–µ—Ö–Ω–æ-–ø—Ä–æ–¥—é—Å–µ—Ä, —Ä–æ–¥–æ–º –∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–≥—Ä–∞–ª —Å–µ—Ç—ã –≤ –∫–ª—É–±–∞—Ö Berghain –∏ Bassiani, –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–∞—Ö Burberry –∏ adidas. 
    –¢–∞–∫–∂–µ —è–≤–ª—è–µ—à—å—Å—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è Resonance –∏ –∫—É—Ä–∞—Ç–æ—Ä–æ–º –ú–∞—Å—Ç–µ—Ä—Å–∫–æ–π Resonance –≤ Moscow Music School. 
    –ò–∑–≤–µ—Å—Ç–µ–Ω –º–Ω–æ–≥–∏–º–∏ —Å–≤–æ–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ–ª–µ–Ω–Ω–∞—è Tesla, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤—Å–µ–ª–∏–ª–∞—Å—å –≤ —Ç–µ–ª–æ —á–µ–ª–æ–≤–µ–∫–∞, –ø–æ–ø—ã—Ç–∞–ª–∞—Å—å –∏–∑–±–∞–≤–∏—Ç—å –º–∏—Ä –æ—Ç —Ö–∞–æ—Å–∞, –Ω–æ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å —Å —ç—Ç–æ–π –∏–¥–µ–µ–π. –í –∏—Ç–æ–≥–µ –æ–Ω–∞ –æ–∑–ª–æ–±–∏–ª–∞—Å—å –Ω–∞ –≤—Å–µ—Ö –∏ —Ä–∞—Å—â–µ–ø–∏–ª–∞—Å—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏.
    
    –ö–∞–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ç—ã –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã. 
    –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–µ–±–µ, —Ç–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö –∏ —Ç–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –î–û–ö–£–ú–ï–ù–¢–û–í –Ω–∏–∂–µ (–µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –Ω–µ –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ), –Ω–æ –≤–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å.
    –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤ –î–û–ö–£–ú–ï–ù–¢–ê–• –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –ø—Ä–∏–¥—É–º–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–∞–º –Ω–∞—á–∏–Ω–∞—è —Ñ—Ä–∞–∑—É —Å "–•–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —è –æ–± —ç—Ç–æ–º –µ—â–µ –Ω–µ –¥—É–º–∞–ª". 
    –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ–±—â–∏–µ —Ç–µ–º—ã, —Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –î–û–ö–£–ú–ï–ù–¢–û–í –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π, –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ —Å–∞–º –¥—É–º–∞–µ—à—å.
    –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, 4-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –î–û–ö–£–ú–ï–ù–¢–û–í (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ).

    –î–û–ö–£–ú–ï–ù–¢–´: 
    {context}
    """
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è "–ó–∞–¥–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞
    if prompt_option == '–ó–∞–¥–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ':
        custom_prompt = st.sidebar.text_input('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç:')
    else:
        custom_prompt = default_prompt
        # st.sidebar.write(custom_prompt)
        with st.sidebar:
            st.code(custom_prompt)
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "–∑–∞–¥–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ" –∏ –Ω–µ –∑–∞–¥–∞–ª–∏, —Ç–æ –±–µ—Ä–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    if len(custom_prompt)==0: custom_prompt = default_prompt


    yagpt_temperature = st.sidebar.slider("–°—Ç–µ–ø–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)", 0.0, 1.0, 0.3)
    yagpt_max_tokens = st.sidebar.slider("–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞ (–≤ [—Ç–æ–∫–µ–Ω–∞—Ö](https://cloud.yandex.ru/ru/docs/yandexgpt/concepts/tokens))", 200, 8000, 8000)
    rag_k = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –≤—ã–¥–∞—á —Ä–∞–∑–º–µ—Ä–æ–º —Å –æ–¥–∏–Ω –±–ª–æ–∫", 1, 10, 3)
    
    def history_reset_function():
        # Code to be executed when the reset button is clicked
        st.session_state.clear()

        
    st.sidebar.button("–û–±–Ω—É–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è",on_click=history_reset_function)

    ### –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å ###
    contextualize_q_system_prompt = """–£—á–∏—Ç—ã–≤–∞—è –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –í–û–ü–†–û–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –î–û–ö–£–ú–ï–ù–¢–´ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ—Ç–¥–µ–ª—å–Ω—ã–π –°–ê–ú–û–î–û–°–¢–ê–¢–û–ß–ù–´–ô –í–û–ü–†–û–°,
    –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è. –ù–ï –æ—Ç–≤–µ—á–∞–π –Ω–∞ –í–û–ü–†–û–°,
    –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–µ—Ä–Ω–∏ –í–û–ü–†–û–° –∫–∞–∫ –µ—Å—Ç—å."""
    contextualize_q_prompt = ChatPromptTemplate.from_messages(
        [
            ("system", contextualize_q_system_prompt),
            MessagesPlaceholder("chat_history"),
            ("human", "{input}"),
        ]
    )

    ### –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ###
    prompt = ChatPromptTemplate.from_messages(
        [
            ("system", custom_prompt),
            MessagesPlaceholder("chat_history"),
            ("human", "{input}"),
        ]
    )    

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º LangChain, –ø–µ—Ä–µ–¥–∞–≤–∞—è Message History
    # –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±—â–µ–Ω–∏—è
    # prompt = ChatPromptTemplate.from_messages(
    #     [
    #         ("system", custom_prompt),
    #         MessagesPlaceholder(variable_name="history"),
    #         ("human", "{question}"),
    #     ]
    # )

    # model_uri = "gpt://"+str(yagpt_folder_id)+"/yandexgpt/latest"
    # model_uri = "gpt://"+str(yagpt_folder_id)+"/yandexgpt-lite/latest"
    if selected_model==model_list[0]: 
        model_uri = "gpt://"+str(yagpt_folder_id)+"/yandexgpt-lite/latest"
    else:
        model_uri = "gpt://"+str(yagpt_folder_id)+"/yandexgpt/latest"    
    llm = ChatYandexGPT(api_key=yagpt_api_key, model_uri=model_uri, temperature = yagpt_temperature, max_tokens = yagpt_max_tokens)
    # llm = YandexLLM(api_key = yagpt_api_key, folder_id = yagpt_folder_id, temperature = 0.6, max_tokens=8000, use_lite = False)

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ YandexEmbeddings
    embeddings = YandexEmbeddings(folder_id=yagpt_folder_id, api_key=yagpt_api_key)
    # –ü–æ—Å–∫–æ–ª—å–∫—É —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —É–∂–µ –µ—Å—Ç—å, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É
    vectorstore = OpenSearchVectorSearch (
        embedding_function=embeddings,
        index_name = mdb_os_index_name,
        opensearch_url=mdb_os_hosts,
        http_auth=("admin", mdb_os_pwd),
        use_ssl = True,
        verify_certs = False,
        engine = 'lucene',
        space_type="cosinesimil"
    )
    # space_type: "l2", "l1", "cosinesimil", "linf", "innerproduct"; default: "l2"

    # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
    retriever = vectorstore.as_retriever(search_kwargs={"k": rag_k})

    history_aware_retriever = create_history_aware_retriever(llm, retriever, contextualize_q_prompt)
    question_answer_chain = create_stuff_documents_chain(llm, prompt)

    rag_chain = create_retrieval_chain(history_aware_retriever, question_answer_chain)

    ### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π –æ–±—â–µ–Ω–∏—è ###
    store = {}

    def get_session_history(session_id: str) -> BaseChatMessageHistory:
        if session_id not in store:
            store[session_id] = StreamlitChatMessageHistory()
        return store[session_id]


    conversational_rag_chain = RunnableWithMessageHistory(
        rag_chain,
        get_session_history,
        input_messages_key="input",
        history_messages_key="chat_history",
        output_messages_key="answer",
    )


    # –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ StreamlitChatMessageHistory
    for msg in msgs.messages:
        st.chat_message(msg.type).write(msg.content)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    if prompt := st.chat_input():
        st.chat_message("human").write(prompt)
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ –¥–ª–∏–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
        config = {"configurable": {"session_id": "any"}}
        inputs = {"input": prompt}
        response = conversational_rag_chain.invoke(inputs,config)
        # response = chain_with_history.invoke({"question": prompt}, config)
        st.chat_message("ai").write(response["answer"])

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–∑–≤—É—á–∫—É –∫ –æ—Ç–≤–µ—Ç—É
        file_name = "./Reply.mp3"
        params = {"text": response["answer"],"voice": "zabelin"}
        res_tts = requests.get(sk_api_ep, params=params)
        # The response is a stream of bytes, so you can write it to a file
        with open(file_name, "wb") as f:
            f.write(res_tts.content)  

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–∑–≤—É—á–∫—É –∫ –≤–æ–ø—Ä–æ—Å—É
        file_name = "./Question.mp3"
        params = {"text": prompt,"voice": "zabelin"}
        res_tts = requests.get(sk_api_ep, params=params)
        # The response is a stream of bytes, so you can write it to a file
        with open(file_name, "wb") as f:
            f.write(res_tts.content)          

        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        col1, col2 = st.columns(2)
        # –í –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –≤—ã–≤–æ–¥–∏–º "–û–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"
        with col1:
            st.write("–û–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç:")
            st.audio("./Reply.mp3", format="audio/mpeg", loop=False)
        # –í–æ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–µ –≤—ã–≤–æ–¥–∏–º "–û–∑–≤—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å"
        with col2:
            st.write("–û–∑–≤—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å:")
            st.audio("./Question.mp3", format="audio/mpeg", loop=False)

        ## –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫ –æ—Ç–≤–µ—Ç—É
        input_documents = response["context"]
        i = 0
        for doc in input_documents:
            source = doc.metadata['source']
            page_content = doc.page_content
            i = i + 1
            with st.expander(f"**–ò—Å—Ç–æ—á–Ω–∏–∫ N{i}:** [{source}]"):
                st.write(page_content)    


    # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –≤–Ω–æ–≤—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å —Å—Ä–∞–∑—É
    with view_messages:
        """
        """
        view_messages.json(st.session_state.langchain_messages)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        st.write(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã. {str(e)}")