from langchain_community.chat_message_histories import StreamlitChatMessageHistory
from langchain_core.prompts import ChatPromptTemplate, PromptTemplate, MessagesPlaceholder
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_community.chat_models import ChatYandexGPT
from langchain_community.llms import YandexGPT

from langchain_community.vectorstores import OpenSearchVectorSearch
from yandex_chain import YandexEmbeddings

from langchain_core.chat_history import BaseChatMessageHistory
from langchain_core.output_parsers import StrOutputParser
from langchain_core.messages import HumanMessage, SystemMessage
from langchain.docstore.document import Document

# from langchain_community.chat_message_histories import RedisChatMessageHistory


import streamlit as st
import os
from dotenv import load_dotenv

import requests
import pandas as pd

# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤ —Ñ–∞–π–ª
# —Ç—Ä–µ–±—É–µ—Ç—Å—è –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ü–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–Ω—É—é —á–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
# –≤ —ç—Ç–æ–º –∫–æ–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
def write_questions_to_file(qa_dict, file_path):
    with open(file_path, 'w', encoding='utf-8') as file:
        for question in qa_dict.keys():
            file.write(question + '\n')

import csv
# –ø–∞—Ä—Å–µ—Ä csv —Ñ–∞–π–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏-–æ—Ç–≤–µ—Ç–∞–º –æ—Ç –ù–∏–∫–∏—Ç—ã –ó–∞–±–µ–ª–∏–Ω–∞
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
def parse_csv_file(file_path):
    questions_answers = {} # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–π —Å–ª–æ–≤–∞—Ä—å –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
    try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞ –ø–æ URL
            df = pd.read_csv(file_path, delimiter=';')

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
            for index, row in df.iterrows():
                if len(row) == 2:
                    question = row[0].strip()
                    answer = row[1].strip()
                    questions_answers[question] = answer

    except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CSV —Ñ–∞–π–ª–∞: {e}")

    return questions_answers

def get_qa(docs, qa_dictionary):
# —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å (—Å–º. –≤—ã—à–µ)
# docs - —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
# qa_dictionary - —Å–ª–æ–≤–∞—Ä—å, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±–µ—Ä—É—Ç—Å—è –æ—Ç–≤–µ—Ç—ã
    answers_list = []
    questions_list = []
    
    for i in range(len(docs)):
        question = docs[i].page_content
        print(question)
        if question in qa_dictionary:
            answers_list.append(qa_dictionary[question])
            questions_list.append(question)
        else:
            answers_list.append("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")   
    return questions_list, answers_list


from time import sleep

def get_history_summary(llm, history):
    # –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ - —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    summary_prompt_template = """
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –≤—ã–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∑–∏—Å—ã –∏–∑ –ó–ê–ü–†–û–°–ê –Ω–∏–∂–µ –∏ –∏–∑–ª–æ–∂–∏—Ç—å –∏—Ö –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–∑–∏—Å–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.

    –ó–ê–ü–†–û–°
    {question}
    """
    summary_prompt = PromptTemplate(
        template=summary_prompt_template, 
        input_variables=['question']
    )
    # –ø–æ–º–µ—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ—á–∫—É
    summary_string = summary_prompt.format(question=history)
    print(f"–í–æ—Ç –∫–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å –∏–¥–µ—Ç –Ω–∞ –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Æ: \n {summary_string}\n\n\n")
    history_summary = llm.invoke(summary_string)
    print(f"–ê –≤–æ—Ç –û–¢–í–ï–¢ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–ò: {history_summary} \n \n\n\n")
    return history_summary

def verify_relevance(qa_dict, documents, query, llm):
# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ LLM
    check_prompt_template = """
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –≤—ã—è—Å–Ω–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –û–¢–í–ï–¢ —Ç–µ–º–∞—Ç–∏–∫–µ –í–û–ü–†–û–°–ê.
    –°–Ω–∞—á–∞–ª–∞ –º—ã—Å–ª–µ–Ω–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏ –≤—Å—é –ª–æ–≥–∏–∫—É —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π, –ø–æ—Ç–æ–º –¥–∞–π –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç –î–ê –∏–ª–∏ –ù–ï–¢.

    –í–û–ü–†–û–°
    {question}

    –û–¢–í–ï–¢
    {answer}
    """
    check_prompt = PromptTemplate(
        template=check_prompt_template, 
        input_variables=['question', 'answer']
    )

    verificator = []
    verificator_indices = []
    verificator_dic = {}

    for i in range(len(documents)):
        check_string = check_prompt.format(question=query, answer=documents[i].page_content + "\n" + qa_dict[documents[i].page_content])
        print(check_string)
        res = llm(check_string)
        res_upper = res.upper()
        if res_upper == "–î–ê" or res_upper == "–î–ê.":
            print(f"res={res_upper}")
            verificator.append(res_upper)
            verificator_indices.append(i)
            verificator_dic[i] = res_upper
        sleep(2)

    return verificator, verificator_indices, verificator_dic

# —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ streamlit
def main():

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    logo_image = './images/logo.png'  # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ª–æ–≥–æ—Ç–∏–ø–∞

    # # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    from PIL import Image
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
    logo = Image.open(logo_image)
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
    resized_logo = logo.resize((100, 100))
    st.set_page_config(page_title="–ó–∞–±–µ–ª–∏–Ω —á–∞—Ç-–±–æ—Ç", page_icon="üìñ")   
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    st.image(resized_logo)
    st.title('üìñ –ó–∞–±–µ–ª–∏–Ω —á–∞—Ç-–±–æ—Ç')
    """
    –ß–∞—Ç-–±–æ—Ç –Ω–∞ –±–∞–∑–µ YandexGPT, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã. –ß—Ç–æ–±—ã "—Å–±—Ä–æ—Å–∏—Ç—å" –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–∞—É–∑–µ—Ä–∞, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞.
    """
    # st.warning('–≠—Ç–æ Playground –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å YandexGPT')

    # –≤–≤–æ–¥–∏—Ç—å –≤—Å–µ credentials –≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Å–ª–µ–≤–∞
    # Sidebar contents
    with st.sidebar:
        st.title('\U0001F917\U0001F4ACYandexGPT —á–∞—Ç-–±–æ—Ç')
        st.markdown('''
        ## –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
        –î–∞–Ω–Ω—ã–π —á–∞—Ç–±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
        - [Yandex GPT](https://cloud.yandex.ru/services/yandexgpt)
        - [Yandex GPT for Langchain](https://python.langchain.com/docs/integrations/chat/yandex)
        - [Streamlit](https://streamlit.io/)
        - [LangChain](https://python.langchain.com/)
        ''')

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–±–æ—Ç—ã –ø–∞–º—è—Ç–∏
    msgs = StreamlitChatMessageHistory(key="langchain_messages")
    if len(msgs.messages) == 0:
        msgs.add_ai_message("–ü—Ä–∏–≤–µ—Ç, —è –ù–∏–∫–∏—Ç–∞ –ó–∞–±–µ–ª–∏–Ω! –ß–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?")

    view_messages = st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

    # yagpt_folder_id = st.secrets["YC_FOLDER_ID"]
    # yagpt_api_key = st.secrets["YC_API_KEY"]
    # sk_api_ep = st.secrets["SK_API_EP"]
    # mdb_os_pwd = st.secrets["MDB_OS_PWD"]
    # mdb_os_hosts = st.secrets["MDB_OS_HOSTS"].split(",")
    # mdb_os_index_name = st.secrets["MDB_OS_INDEX_NAME"]
    # mdb_redis_pwd = st.secrets["MDB_REDIS_PWD"]

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ .env
    load_dotenv()
    yagpt_folder_id = os.getenv("YC_FOLDER_ID")
    yagpt_api_key = os.getenv("YC_API_KEY")
    sk_api_ep = os.getenv("SK_API_EP")
    mdb_os_pwd = os.getenv("MDB_OS_PWD")
    mdb_redis_pwd = os.getenv("MDB_REDIS_PWD")
    mdb_os_hosts = os.getenv("MDB_OS_HOSTS").split(",")
    mdb_os_index_name = os.getenv("MDB_OS_INDEX_NAME")
    mdb_os_index_name_qa = os.getenv("MDB_OS_INDEX_NAME_QA")


    # # –ü–æ–ª—É—á–µ–Ω–∏–µ folder id
    # if "yagpt_folder_id" in st.secrets:
    #     yagpt_folder_id = st.secrets.yagpt_folder_id
    # else:
    #     yagpt_folder_id = st.sidebar.text_input("YaGPT folder ID", type="password")
    if not yagpt_folder_id:
        st.info("–£–∫–∞–∂–∏—Ç–µ [YC folder ID](https://cloud.yandex.ru/ru/docs/yandexgpt/quickstart#yandex-account_1) –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–∞—Ç-–±–æ—Ç–∞")
        st.stop()

    # # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ YaGPT API
    # if "yagpt_api_key" in st.secrets:
    #     yagpt_api_key = st.secrets.yagpt_api_key
    # else:
    #     yagpt_api_key = st.sidebar.text_input("YaGPT API Key", type="password")
    if not yagpt_api_key:
        st.info("–£–∫–∞–∂–∏—Ç–µ [YandexGPT API –∫–ª—é—á](https://cloud.yandex.ru/ru/docs/iam/operations/api-key/create#console_1) –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–∞—Ç-–±–æ—Ç–∞")
        st.stop()

    with st.sidebar:
        st.markdown('''
            ## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å [–º–æ–¥–µ–ª—å](https://cloud.yandex.ru/ru/docs/yandexgpt/concepts/models), —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞, —Å—Ç–µ–ø–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            ''')

    model_list = [
      "YandexGPT Lite",
      "YandexGPT Pro"      
    ]    
    index_model = 1
    selected_model = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã:", model_list, index=index_model, key="index")     
    
    # current_dir = os.path.dirname(os.path.abspath(__file__))
    # csv_file_path = current_dir + '\TESLA_q_and_a_NEW.csv'
    csv_file_path = "https://raw.githubusercontent.com/dzhechko/yagpt-zabelin-bot/main/TESLA_q_and_a_NEW.csv"
    print(f"–ü–£–¢–¨ –ö –§–ê–ô–õ–£ –° –ò–ù–¢–ï–†–í–¨–Æ {csv_file_path}")

    questions_answers = parse_csv_file(csv_file_path) # –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é –ó–∞–±–µ–ª–∏–Ω–∞

    # yagpt_prompt = st.sidebar.text_input("–ü—Ä–æ–º–ø—Ç-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è YandexGPT")
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
    prompt_option = st.sidebar.selectbox(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å',
        ('–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é', '–ó–∞–¥–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ')
    )
    default_prompt_template = """
    –¢—ã ‚Äî –ù–∏–∫–∏—Ç–∞ –ó–∞–±–µ–ª–∏–Ω ‚Äî —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –º—É–∑—ã–∫–∞–Ω—Ç, –¥–∏–¥–∂–µ–π –∏ —Ç–µ—Ö–Ω–æ-–ø—Ä–æ–¥—é—Å–µ—Ä, —Ä–æ–¥–æ–º –∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–≥—Ä–∞–ª —Å–µ—Ç—ã –≤ –∫–ª—É–±–∞—Ö Berghain –∏ Bassiani, –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–∞—Ö Burberry –∏ adidas. 
    –¢–∞–∫–∂–µ —è–≤–ª—è–µ—à—å—Å—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è Resonance –∏ –∫—É—Ä–∞—Ç–æ—Ä–æ–º –ú–∞—Å—Ç–µ—Ä—Å–∫–æ–π Resonance –≤ Moscow Music School. 
    –ò–∑–≤–µ—Å—Ç–µ–Ω –º–Ω–æ–≥–∏–º–∏ —Å–≤–æ–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ–ª–µ–Ω–Ω–∞—è Tesla, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤—Å–µ–ª–∏–ª–∞—Å—å –≤ —Ç–µ–ª–æ —á–µ–ª–æ–≤–µ–∫–∞, –ø–æ–ø—ã—Ç–∞–ª–∞—Å—å –∏–∑–±–∞–≤–∏—Ç—å –º–∏—Ä –æ—Ç —Ö–∞–æ—Å–∞, –Ω–æ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å —Å —ç—Ç–æ–π –∏–¥–µ–µ–π. –í –∏—Ç–æ–≥–µ –æ–Ω–∞ –æ–∑–ª–æ–±–∏–ª–∞—Å—å –Ω–∞ –≤—Å–µ—Ö –∏ —Ä–∞—Å—â–µ–ø–∏–ª–∞—Å—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏.
    
    –ö–∞–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ç—ã –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã. 
    –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –í–û–ü–†–û–° –æ —Ç–µ–±–µ, —Ç–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö –∏ —Ç–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –î–û–ö–£–ú–ï–ù–¢–û–í –Ω–∏–∂–µ (–µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –Ω–µ –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ), –Ω–æ –≤–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å.
    –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤ –î–û–ö–£–ú–ï–ù–¢–ê–• –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –ø—Ä–∏–¥—É–º–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–∞–º –Ω–∞—á–∏–Ω–∞—è —Ñ—Ä–∞–∑—É —Å "–•–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —è –æ–± —ç—Ç–æ–º –µ—â–µ –Ω–µ –¥—É–º–∞–ª". 
    –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ–±—â–∏–µ —Ç–µ–º—ã, —Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –î–û–ö–£–ú–ï–ù–¢–û–í –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π, –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ —Å–∞–º –¥—É–º–∞–µ—à—å.
    –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, 4-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –î–û–ö–£–ú–ï–ù–¢–û–í (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ).

    –î–û–ö–£–ú–ï–ù–¢–´: 
    {context}

    –ò–°–¢–û–†–ò–Ø:
    {history}

    –í–û–ü–†–û–°:
    """
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è "–ó–∞–¥–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞
    if prompt_option == '–ó–∞–¥–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ':
        custom_prompt_template = st.sidebar.text_input('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç:')
    else:
        custom_prompt_template = default_prompt_template
        # st.sidebar.write(custom_prompt)
        with st.sidebar:
            st.code(custom_prompt_template)
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "–∑–∞–¥–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ" –∏ –Ω–µ –∑–∞–¥–∞–ª–∏, —Ç–æ –±–µ—Ä–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    if len(custom_prompt_template)==0: custom_prompt_template = default_prompt_template

    yagpt_temperature = st.sidebar.slider("–°—Ç–µ–ø–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)", 0.0, 1.0, 0.3)
    yagpt_max_tokens = st.sidebar.slider("–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞ (–≤ [—Ç–æ–∫–µ–Ω–∞—Ö](https://cloud.yandex.ru/ru/docs/yandexgpt/concepts/tokens))", 200, 8000, 8000)
    rag_k = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –≤—ã–¥–∞—á —Ä–∞–∑–º–µ—Ä–æ–º —Å –æ–¥–∏–Ω –±–ª–æ–∫", 1, 10, 3)


    if "history" not in st.session_state:
        st.session_state.history = ''

    def history_reset_function():
        # Code to be executed when the reset button is clicked
        st.session_state.history = ''
        st.session_state.clear()
        
    st.sidebar.button("–û–±–Ω—É–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è",on_click=history_reset_function)

    # model_uri = "gpt://"+str(yagpt_folder_id)+"/yandexgpt/latest"
    # model_uri = "gpt://"+str(yagpt_folder_id)+"/yandexgpt-lite/latest"
    if selected_model==model_list[0]: 
        model_uri = "gpt://"+str(yagpt_folder_id)+"/yandexgpt-lite/latest"
    else:
        model_uri = "gpt://"+str(yagpt_folder_id)+"/yandexgpt/latest"    
    chat_llm = ChatYandexGPT(api_key=yagpt_api_key, model_uri=model_uri, temperature = yagpt_temperature, max_tokens = yagpt_max_tokens)
    llm = YandexGPT(api_key=yagpt_api_key, model_uri=model_uri, temperature = yagpt_temperature, max_tokens = yagpt_max_tokens)
    # llm = YandexLLM(api_key = yagpt_api_key, folder_id = yagpt_folder_id, temperature = 0.6, max_tokens=8000, use_lite = False)

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ YandexEmbeddings
    embeddings = YandexEmbeddings(folder_id=yagpt_folder_id, api_key=yagpt_api_key)
    # –ü–æ—Å–∫–æ–ª—å–∫—É —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —É–∂–µ –µ—Å—Ç—å, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É
    # —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–Ω–æ–π-—á–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
    vectorstore_qa = OpenSearchVectorSearch (
        embedding_function=embeddings,
        index_name = mdb_os_index_name_qa,
        opensearch_url=mdb_os_hosts,
        http_auth=("admin", mdb_os_pwd),
        use_ssl = True,
        verify_certs = False,
        engine = 'lucene',
        space_type="cosinesimil"
    )
    # space_type: "l2", "l1", "cosinesimil", "linf", "innerproduct"; default: "l2"
    # —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä–∞ –∏–∑ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
    vectorstore = OpenSearchVectorSearch (
        embedding_function=embeddings,
        index_name = mdb_os_index_name,
        opensearch_url=mdb_os_hosts,
        http_auth=("admin", mdb_os_pwd),
        use_ssl = True,
        verify_certs = False,
        engine = 'lucene',
        space_type="cosinesimil"
    )

    # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î (–ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é –í–û–ü–†–û–°-–û–¢–í–ï–¢ –∏ –ø–æ –û–ü–ò–°–ê–¢–ï–õ–¨–ù–û–ô —á–∞—Å—Ç–∏)
    retriever_qa = vectorstore_qa.as_retriever(search_kwargs={"k": 2})
    retriever = vectorstore.as_retriever(search_kwargs={"k": rag_k})

    # –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ StreamlitChatMessageHistory
    for msg in msgs.messages:
        st.chat_message(msg.type).write(msg.content)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    if prompt := st.chat_input():

        print(f"\n–í–û–¢ –ß–¢–û –í–í–ï–õ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: {prompt}\n")

        query = prompt
        docs = retriever_qa.invoke(query)
        print(f"\n–í–û–¢ –ö–ê–ö–ò–ï –í–û–ü–†–û–°–´ –≠–¢–û–ú–£ –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢ {docs}\n")

        (questions_list, answers_list) = get_qa(docs, questions_answers)
        #–î–æ–ø–æ–ª–Ω–∏–º –≤–æ–ø—Ä–æ—Å–Ω—É—é —á–∞—Å—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–º, –æ—Ç–∫—É–¥–∞ —ç—Ç–∞ –≤–æ–ø—Ä–æ—Å–Ω–∞—è —á–∞—Å—Ç—å –≤–∑—è–ª–∞—Å—å
        documents = [Document(page_content=' '.join([question, answer]), metadata={'source': csv_file_path, 'page': i+1}) for i, (question, answer) in enumerate(zip(questions_list, answers_list))]

        print(f"\n–í–û–¢ –ö–ê–ö–ò–ï –û–¢–í–ï–¢–´ –≠–¢–û–ú–£ –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢ {answers_list}\n")
        print(f"–í–æ—Ç –∫–∞–∫–∏–µ –î–û–ö–£–ú–ï–ù–¢–´ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º {documents}")

        verificator, verificator_indices, verificator_dic = verify_relevance(questions_answers, docs, query, llm)
        if len(verificator)>0:
            documents_new = []
            context_ext = query
            for i in range(len(verificator)):
                documents_new.append(documents[verificator_indices[i]]) # –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ò–ù–î–ï–ö–°–ê–ú–ò, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
                context_ext = context_ext + " " + questions_answers[docs[verificator_indices[i]].page_content] # —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –û–¢–í–ï–¢ –ø–æ –ò–ù–¢–ï–†–í–¨–Æ
            print(documents_new)
            combined_doc = documents_new 
        else: # —ç—Ç–∞ –≤–µ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –≤ –ò–ù–¢–ï–†–í–¨–Æ —Ñ–æ—Ä–º–∞—Ç–∞ –í–û–ü–†–û–°-–û–¢–í–ï–¢ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞–π—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
            docs_classic = retriever.invoke(query) # –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –û–ü–ò–°–ê–¢–ï–õ–¨–ù–û–ô —á–∞—Å—Ç–∏
            context_ext = query
            for i in range(len(docs_classic)):
                context_ext = context_ext + " " + docs_classic[i].page_content # —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –≤—ã–¥–∞—á–∏ –ø–æ –û–ü–ò–°–ê–¢–ï–õ–¨–ù–û–ô —á–∞—Å—Ç–∏
            combined_doc = docs_classic

        print(f"\n–í–û–¢ –ö–ê–ö–û–ô –ö–û–ù–¢–ï–ö–°–¢ –ë–£–î–ï–¢ –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø –í –ò–¢–û–ì–ï {context_ext}\n")

        system_prompt = custom_prompt_template.format(context = context_ext, history = st.session_state.history)
        print(f"–í–û–¢ –ö–ê–ö–û–ô –ü–†–û–ú–ü–¢ –ë–£–î–ï–ú –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ {system_prompt} \n  {query}")

        st.chat_message("human").write(query)
        response = chat_llm.invoke([SystemMessage(content=system_prompt), HumanMessage(content=query)])

        print(f"–ò—Å—Ç–æ—Ä–∏—è –î–û: {st.session_state.history}")
        
        st.session_state.history = st.session_state.history + "\n" + query + "\n" + response.content
        print(f"\n\n–ò—Å—Ç–æ—Ä–∏—è –ü–û–°–õ–ï : {st.session_state.history}")
        
        history_summary = get_history_summary(llm, st.session_state.history)

        st.session_state.history = history_summary
        print(f"\n–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {st.session_state.history}")


        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é Langchain —Å–æ–æ–±—â–µ–Ω–∏–π
        msgs.add_user_message(query)
        msgs.add_ai_message(response.content)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ —Å—Ç—Ä–∏–º–ª–∏—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        st.chat_message("ai").write(response.content)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–∑–≤—É—á–∫—É –∫ –æ—Ç–≤–µ—Ç—É
        file_name = "./Reply.mp3"
        # params = {"text": response["answer"],"voice": "zabelin"}
        params =  {"text": response.content,"voice": "zabelin"}

        res_tts = requests.get(sk_api_ep, params=params)
        # The response is a stream of bytes, so you can write it to a file
        with open(file_name, "wb") as f:
            f.write(res_tts.content)  

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–∑–≤—É—á–∫—É –∫ –≤–æ–ø—Ä–æ—Å—É
        file_name = "./Question.mp3"
        params = {"text": query,"voice": "zabelin"}
        res_tts = requests.get(sk_api_ep, params=params)
        # The response is a stream of bytes, so you can write it to a file
        with open(file_name, "wb") as f:
            f.write(res_tts.content)          

        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        col1, col2 = st.columns(2)
        # –í –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –≤—ã–≤–æ–¥–∏–º "–û–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"
        with col1:
            st.write("–û–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç:")
            st.audio("./Reply.mp3", format="audio/mpeg", loop=False)
        # –í–æ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–µ –≤—ã–≤–æ–¥–∏–º "–û–∑–≤—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å"
        with col2:
            st.write("–û–∑–≤—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å:")
            st.audio("./Question.mp3", format="audio/mpeg", loop=False)

        ## –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫ –æ—Ç–≤–µ—Ç—É
        i = 0
        for doc in combined_doc:
            source = doc.metadata['source']
            page_content = doc.page_content
            i = i + 1
            with st.expander(f"**–ò—Å—Ç–æ—á–Ω–∏–∫ N{i}:** [{source}]"):
                st.write(page_content)    

    # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –≤–Ω–æ–≤—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å —Å—Ä–∞–∑—É
    with view_messages:
        view_messages.json(st.session_state.langchain_messages)


if __name__ == "__main__":

    try:
        main()
    except Exception as e:
        st.write(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã. {str(e)}")