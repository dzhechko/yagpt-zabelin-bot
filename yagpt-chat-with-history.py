from langchain_community.chat_message_histories import StreamlitChatMessageHistory
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_community.chat_models import ChatYandexGPT
# from yandex_chain import YandexLLM

import streamlit as st
import os
from dotenv import load_dotenv

# —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ streamlit
def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    logo_image = './images/logo.png'  # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ª–æ–≥–æ—Ç–∏–ø–∞

    # # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    from PIL import Image
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
    logo = Image.open(logo_image)
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
    resized_logo = logo.resize((100, 100))
    st.set_page_config(page_title="YaGPT —á–∞—Ç–±–æ—Ç", page_icon="üìñ")   
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    st.image(resized_logo)
    st.title('üìñ YaGPT —á–∞—Ç–±–æ—Ç')
    """
    –ß–∞—Ç–±–æ—Ç –Ω–∞ –±–∞–∑–µ YandexGPT, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã. –ß—Ç–æ–±—ã "—Å–±—Ä–æ—Å–∏—Ç—å" –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–∞—É–∑–µ—Ä–∞.\n
    –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫—É—é [YaGPT –º–æ–¥–µ–ª—å](https://cloud.yandex.ru/ru/docs/yandexgpt/concepts/models) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∞ —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–º–µ—Ä –µ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–º. –æ–∫–Ω–æ —Å–ª–µ–≤–∞). 
    –ò—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏–∂–µ.
    [–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è](https://github.com/dzhechko/yagpt-chat-bot-lcel/blob/main/yagpt-chat-with-history-02.py)
    """
    # st.warning('–≠—Ç–æ Playground –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å YandexGPT')

    # –≤–≤–æ–¥–∏—Ç—å –≤—Å–µ credentials –≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Å–ª–µ–≤–∞
    # Sidebar contents
    with st.sidebar:
        st.title('\U0001F917\U0001F4ACYaGPT —á–∞—Ç–±–æ—Ç')
        st.markdown('''
        ## –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
        –î–∞–Ω–Ω—ã–π YaGPT —á–∞—Ç–±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
        - [Yandex GPT](https://cloud.yandex.ru/services/yandexgpt)
        - [Yandex GPT for Langchain](https://python.langchain.com/docs/integrations/chat/yandex)
        - [Streamlit](https://streamlit.io/)
        - [LangChain](https://python.langchain.com/)
        ''')

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–±–æ—Ç—ã –ø–∞–º—è—Ç–∏
    msgs = StreamlitChatMessageHistory(key="langchain_messages")
    if len(msgs.messages) == 0:
        msgs.add_ai_message("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?")

    view_messages = st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

    yagpt_folder_id = st.secrets["YC_FOLDER_ID"]
    yagpt_api_key = st.secrets["YC_API_KEY"]

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ .env
    # load_dotenv()
    # yagpt_folder_id = os.getenv("YC_FOLDER_ID")
    # yagpt_api_key = os.getenv("YC_API_KEY")


    # # –ü–æ–ª—É—á–µ–Ω–∏–µ folder id
    # if "yagpt_folder_id" in st.secrets:
    #     yagpt_folder_id = st.secrets.yagpt_folder_id
    # else:
    #     yagpt_folder_id = st.sidebar.text_input("YaGPT folder ID", type="password")
    if not yagpt_folder_id:
        st.info("–£–∫–∞–∂–∏—Ç–µ [YC folder ID](https://cloud.yandex.ru/ru/docs/yandexgpt/quickstart#yandex-account_1) –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–∞—Ç–±–æ—Ç–∞")
        st.stop()

    # # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ YaGPT API
    # if "yagpt_api_key" in st.secrets:
    #     yagpt_api_key = st.secrets.yagpt_api_key
    # else:
    #     yagpt_api_key = st.sidebar.text_input("YaGPT API Key", type="password")
    if not yagpt_api_key:
        st.info("–£–∫–∞–∂–∏—Ç–µ [YaGPT API –∫–ª—é—á](https://cloud.yandex.ru/ru/docs/iam/operations/api-key/create#console_1) –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–∞—Ç–±–æ—Ç–∞")
        st.stop()

    with st.sidebar:
        st.markdown('''
            ## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å [–º–æ–¥–µ–ª—å](https://cloud.yandex.ru/ru/docs/yandexgpt/concepts/models), —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞, —Å—Ç–µ–ø–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            ''')

    model_list = [
      "YandexGPT Lite",
      "YandexGPT Pro"      
    ]    
    index_model = 0
    selected_model = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã:", model_list, index=index_model, key="index")     
    
    # yagpt_prompt = st.sidebar.text_input("–ü—Ä–æ–º–ø—Ç-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è YaGPT")
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
    prompt_option = st.sidebar.selectbox(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å',
        ('–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é', '–ó–∞–¥–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ')
    )
    default_prompt = "–¢—ã –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã–π —á–∞—Ç–±–æ—Ç, —Ç–µ–±—è –∑–æ–≤—É—Ç YandexGPT. –ú–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã. –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥—å –∫—Ä–∞—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–π 30 —Å–ª–æ–≤ –∏–ª–∏ –º–µ–Ω—å—à–µ."
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è "–ó–∞–¥–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞
    if prompt_option == '–ó–∞–¥–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ':
        custom_prompt = st.sidebar.text_input('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç:')
    else:
        custom_prompt = default_prompt
        # st.sidebar.write(custom_prompt)
        with st.sidebar:
            st.code(custom_prompt)
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "–∑–∞–¥–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ" –∏ –Ω–µ –∑–∞–¥–∞–ª–∏, —Ç–æ –±–µ—Ä–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    if len(custom_prompt)==0: custom_prompt = default_prompt


    yagpt_temperature = st.sidebar.slider("–°—Ç–µ–ø–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)", 0.0, 1.0, 0.6)
    yagpt_max_tokens = st.sidebar.slider("–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞ (–≤ [—Ç–æ–∫–µ–Ω–∞—Ö](https://cloud.yandex.ru/ru/docs/yandexgpt/concepts/tokens))", 200, 8000, 5000)

    def history_reset_function():
        # Code to be executed when the reset button is clicked
        st.session_state.clear()

    st.sidebar.button("–û–±–Ω—É–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è",on_click=history_reset_function)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º LangChain, –ø–µ—Ä–µ–¥–∞–≤–∞—è Message History
    # –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±—â–µ–Ω–∏—è
    prompt = ChatPromptTemplate.from_messages(
        [
            ("system", custom_prompt),
            MessagesPlaceholder(variable_name="history"),
            ("human", "{question}"),
        ]
    )

    # model_uri = "gpt://"+str(yagpt_folder_id)+"/yandexgpt/latest"
    # model_uri = "gpt://"+str(yagpt_folder_id)+"/yandexgpt-lite/latest"
    if selected_model==model_list[0]: 
        model_uri = "gpt://"+str(yagpt_folder_id)+"/yandexgpt-lite/latest"
    else:
        model_uri = "gpt://"+str(yagpt_folder_id)+"/yandexgpt/latest"    
    model = ChatYandexGPT(api_key=yagpt_api_key, model_uri=model_uri, temperature = yagpt_temperature, max_tokens = yagpt_max_tokens)
    # model = YandexLLM(api_key = yagpt_api_key, folder_id = yagpt_folder_id, temperature = 0.6, max_tokens=8000, use_lite = False)

    chain = prompt | model
    chain_with_history = RunnableWithMessageHistory(
        chain,
        lambda session_id: msgs,
        input_messages_key="question",
        history_messages_key="history",
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ StreamlitChatMessageHistory
    for msg in msgs.messages:
        st.chat_message(msg.type).write(msg.content)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    if prompt := st.chat_input():
        st.chat_message("human").write(prompt)
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ –¥–ª–∏–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
        config = {"configurable": {"session_id": "any"}}
        response = chain_with_history.invoke({"question": prompt}, config)
        st.chat_message("ai").write(response.content)

    # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –≤–Ω–æ–≤—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å —Å—Ä–∞–∑—É
    with view_messages:
        """
        –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å –ø–æ–º–æ—â—å—é:
        ```python
        msgs = StreamlitChatMessageHistory(key="langchain_messages")
        ```

        –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ `st.session_state.langchain_messages`:
        """
        view_messages.json(st.session_state.langchain_messages)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        st.write(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã. {str(e)}")